{
	"info": {
		"_postman_id": "9ec72d80-dcb8-4442-8914-50dd5239c728",
		"name": "Proyecto final - Sprint 3",
		"description": "# 📄 Get started here\n\nThis template contains a boilerplate for documentation that you can quickly customize and reuse.\n\n## 🔖 How to use this template\n\n- Replace the content given brackets (()) with your API's details.\n- Tips are formatted in `codespan` - feel free to read and remove them.\n    \n\n---\n\n`Start with a brief overview of what your API offers.`\n\nThe ((product name)) provides many API products, tools, and resources that enable you to ((add product value here)).\n\n`You can also list the APIs you offer, link to the relevant pages, or do both in this section.`\n\n## **Getting started guide**\n\n`List the steps or points required to start using your APIs. Make sure to cover everything required to reach success with your API as quickly as possible.`\n\nTo start using the ((add APIs here)), you need to -\n\n`The points given below are from The Postman API's documentation. You can reference it to write your own getting started guide.`\n\n- You must use a valid API Key to send requests to the API endpoints. You can get your API key from Postman's [integrations dashboard](https://go.postman.co/settings/me/api-keys).\n- The API has [rate and usage limits](https://learning.postman.com/docs/developer/postman-api/postman-api-rate-limits/).\n- The API only responds to HTTPS-secured communications. Any requests sent via HTTP return an HTTP 301 redirect to the corresponding HTTPS resources.\n- The API returns request responses in JSON format. When an API request returns an error, it is sent in the JSON response as an error key.\n    \n\n## Authentication\n\n`Add details on the authorization keys/tokens required, steps that cover how to get them, and the relevant error codes.`\n\nThe ((product name)) API uses ((add your API's authorization type)) for authentication.\n\n`The details given below are from the Postman API's documentation. You can reference it to write your own authentication section.`\n\nPostman uses API keys for authentication. You can generate a Postman API key in the [API keys](https://postman.postman.co/settings/me/api-keys) section of your Postman account settings.\n\nYou must include an API key in each request to the Postman API with the X-Api-Key request header.\n\n### Authentication error response\n\nIf an API key is missing, malformed, or invalid, you will receive an HTTP 401 Unauthorized response code.\n\n## Rate and usage limits\n\n`Use this section to cover your APIs' terms of use. Include API limits, constraints, and relevant error codes, so consumers understand the permitted API usage and practices.`\n\n`The example given below is from The Postman API's documentation. Use it as a reference to write your APIs' terms of use.`\n\nAPI access rate limits apply at a per-API key basis in unit time. The limit is 300 requests per minute. Also, depending on your plan, you may have usage limits. If you exceed either limit, your request will return an HTTP 429 Too Many Requests status code.\n\nEach API response returns the following set of headers to help you identify your use status:\n\n| Header | Description |\n| --- | --- |\n| `X-RateLimit-Limit` | The maximum number of requests that the consumer is permitted to make per minute. |\n| `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. |\n| `X-RateLimit-Reset` | The time at which the current rate limit window resets in UTC epoch seconds. |\n\n### 503 response\n\nAn HTTP `503` response from our servers indicates there is an unexpected spike in API access traffic. The server is usually operational within the next five minutes. If the outage persists or you receive any other form of an HTTP `5XX` error, [contact support](https://support.postman.com/hc/en-us/requests/new/).\n\n### **Need some help?**\n\n`Add links that customers can refer to whenever they need help.`\n\nIn case you have questions, go through our tutorials ((link to your video or help documentation here)). Or visit our FAQ page ((link to the relevant page)).\n\nOr you can check out our community forum, there’s a good chance our community has an answer for you. Visit our developer forum ((link to developer forum)) to review topics, ask questions, and learn from others.\n\n`You can also document or add links to libraries, code examples, and other resources needed to make a request.`",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4253512"
	},
	"item": [
		{
			"name": "Asesores",
			"item": [
				{
					"name": "Crear asesor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().create_at).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().email).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().roles).to.be.a('array').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.globals.set(\"agent_email\", pm.response.json().email);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/agents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"agents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear asesor sin nombre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/agents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"agents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear asesor sin correo electrónico",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/agents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"agents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear asesor sin contraseña",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/agents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"agents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear asesor con correo electrónico registrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 409\", function() {\r",
									"    pm.response.to.have.status(409)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{agent_email}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/agents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"agents"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Consumidores",
			"item": [
				{
					"name": "Crear consumidor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const identifications_types = [\"Cédula de ciudadanía\", \"Cédula de extranjería\", \"Tarjeta de identidad\", \"Pasaporte\"];\r",
									"const identification_type = identifications_types[Math.floor(Math.random() * identifications_types.length)];\r",
									"pm.environment.set(\"identification_type\", identification_type);\r",
									"\r",
									"const identification_number = Math.floor(1000000000 + Math.random() * 9000000000);\r",
									"pm.environment.set(\"identification_number\", identification_number);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().address).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().contact_number).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().create_at).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().email).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().identification_number).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().identification_type).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().roles).to.be.a('array').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.globals.set(\"consumer_email\", pm.response.json().email);\r",
									"pm.globals.set(\"consumer_id\", pm.response.json().id);\r",
									"pm.globals.set(\"consumer_identification_number\", pm.response.json().identification_number);\r",
									"pm.globals.set(\"consumer_identification_type\", pm.response.json().identification_type);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"identification_type\": \"{{identification_type}}\",\r\n    \"identification_number\": \"{{identification_number}}\",\r\n    \"contact_number\": \"{{$randomPhoneNumber}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"address\": \"{{$randomStreetAddress}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/consumers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"consumers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear consumidor sin nombre",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const identifications_types = [\"Cédula de ciudadanía\", \"Cédula de extranjería\", \"Tarjeta de identidad\", \"Pasaporte\"];\r",
									"const identification_type = identifications_types[Math.floor(Math.random() * identifications_types.length)];\r",
									"pm.environment.set(\"identification_type\", identification_type);\r",
									"\r",
									"const identification_number = Math.floor(1000000000 + Math.random() * 9000000000);\r",
									"pm.environment.set(\"identification_number\", identification_number);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"identification_type\": \"{{identification_type}}\",\r\n    \"identification_number\": \"{{identification_number}}\",\r\n    \"contact_number\": \"{{$randomPhoneNumber}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"address\": \"{{$randomStreetAddress}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/consumers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"consumers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear consumidor sin tipo de identificación",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const identifications_types = [\"Cédula de ciudadanía\", \"Cédula de extranjería\", \"Tarjeta de identidad\", \"Pasaporte\"];\r",
									"const identification_type = identifications_types[Math.floor(Math.random() * identifications_types.length)];\r",
									"pm.environment.set(\"identification_type\", identification_type);\r",
									"\r",
									"const identification_number = Math.floor(1000000000 + Math.random() * 9000000000);\r",
									"pm.environment.set(\"identification_number\", identification_number);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"identification_number\": \"{{identification_number}}\",\r\n    \"contact_number\": \"{{$randomPhoneNumber}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"address\": \"{{$randomStreetAddress}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/consumers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"consumers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear consumidor sin número de identificación",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const identifications_types = [\"Cédula de ciudadanía\", \"Cédula de extranjería\", \"Tarjeta de identidad\", \"Pasaporte\"];\r",
									"const identification_type = identifications_types[Math.floor(Math.random() * identifications_types.length)];\r",
									"pm.environment.set(\"identification_type\", identification_type);\r",
									"\r",
									"const identification_number = Math.floor(1000000000 + Math.random() * 9000000000);\r",
									"pm.environment.set(\"identification_number\", identification_number);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"identification_type\": \"{{identification_type}}\",\r\n    \"contact_number\": \"{{$randomPhoneNumber}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"address\": \"{{$randomStreetAddress}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/consumers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"consumers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear consumidor sin número de contacto",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const identifications_types = [\"Cédula de ciudadanía\", \"Cédula de extranjería\", \"Tarjeta de identidad\", \"Pasaporte\"];\r",
									"const identification_type = identifications_types[Math.floor(Math.random() * identifications_types.length)];\r",
									"pm.environment.set(\"identification_type\", identification_type);\r",
									"\r",
									"const identification_number = Math.floor(1000000000 + Math.random() * 9000000000);\r",
									"pm.environment.set(\"identification_number\", identification_number);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"identification_type\": \"{{identification_type}}\",\r\n    \"identification_number\": \"{{identification_number}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"address\": \"{{$randomStreetAddress}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/consumers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"consumers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear consumidor sin correo electrónico",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const identifications_types = [\"Cédula de ciudadanía\", \"Cédula de extranjería\", \"Tarjeta de identidad\", \"Pasaporte\"];\r",
									"const identification_type = identifications_types[Math.floor(Math.random() * identifications_types.length)];\r",
									"pm.environment.set(\"identification_type\", identification_type);\r",
									"\r",
									"const identification_number = Math.floor(1000000000 + Math.random() * 9000000000);\r",
									"pm.environment.set(\"identification_number\", identification_number);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"identification_type\": \"{{identification_type}}\",\r\n    \"identification_number\": \"{{identification_number}}\",\r\n    \"contact_number\": \"{{$randomPhoneNumber}}\",\r\n    \"address\": \"{{$randomStreetAddress}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/consumers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"consumers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear consumidor sin dirección",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const identifications_types = [\"Cédula de ciudadanía\", \"Cédula de extranjería\", \"Tarjeta de identidad\", \"Pasaporte\"];\r",
									"const identification_type = identifications_types[Math.floor(Math.random() * identifications_types.length)];\r",
									"pm.environment.set(\"identification_type\", identification_type);\r",
									"\r",
									"const identification_number = Math.floor(1000000000 + Math.random() * 9000000000);\r",
									"pm.environment.set(\"identification_number\", identification_number);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"identification_type\": \"{{identification_type}}\",\r\n    \"identification_number\": \"{{identification_number}}\",\r\n    \"contact_number\": \"{{$randomPhoneNumber}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/consumers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"consumers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear consumidor sin contraseña",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const identifications_types = [\"Cédula de ciudadanía\", \"Cédula de extranjería\", \"Tarjeta de identidad\", \"Pasaporte\"];\r",
									"const identification_type = identifications_types[Math.floor(Math.random() * identifications_types.length)];\r",
									"pm.environment.set(\"identification_type\", identification_type);\r",
									"\r",
									"const identification_number = Math.floor(1000000000 + Math.random() * 9000000000);\r",
									"pm.environment.set(\"identification_number\", identification_number);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"identification_type\": \"{{identification_type}}\",\r\n    \"identification_number\": \"{{identification_number}}\",\r\n    \"contact_number\": \"{{$randomPhoneNumber}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"address\": \"{{$randomStreetAddress}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/consumers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"consumers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear consumidor con correo electrónico registrado",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const identifications_types = [\"Cédula de ciudadanía\", \"Cédula de extranjería\", \"Tarjeta de identidad\", \"Pasaporte\"];\r",
									"const identification_type = identifications_types[Math.floor(Math.random() * identifications_types.length)];\r",
									"pm.environment.set(\"identification_type\", identification_type);\r",
									"\r",
									"const identification_number = Math.floor(1000000000 + Math.random() * 9000000000);\r",
									"pm.environment.set(\"identification_number\", identification_number);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 409\", function() {\r",
									"    pm.response.to.have.status(409)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"identification_type\": \"{{identification_type}}\",\r\n    \"identification_number\": \"{{identification_number}}\",\r\n    \"contact_number\": \"{{$randomPhoneNumber}}\",\r\n    \"email\": \"{{consumer_email}}\",\r\n    \"address\": \"{{$randomStreetAddress}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/consumers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"consumers"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Clientes",
			"item": [
				{
					"name": "Crear cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().create_at).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().email).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().roles).to.be.a('array').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.globals.set(\"client_email\", pm.response.json().email);\r",
									"pm.globals.set(\"client_id\", pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/clients",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear cliente sin nombre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/clients",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear cliente sin correo electrónico",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/clients",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear cliente sin contraseña",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/clients",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear cliente con correo electrónico ya registrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 409\", function() {\r",
									"    pm.response.to.have.status(409)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{client_email}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/clients",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Autorización",
			"item": [
				{
					"name": "Autenticar asesor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.globals.set(\"token_agent\", pm.response.json().token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{agent_email}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/agents/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"agents",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Autenticar asesor sin correo electrónico",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/agents/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"agents",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Autenticar asesor sin contraseña",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{agent_email}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/agents/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"agents",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Autenticar asesor con credenciales invalidas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 401\", function() {\r",
									"    pm.response.to.have.status(401)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{agent_email}}\",\r\n    \"password\": \"1234560\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/agents/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"agents",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Autenticar consumidor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.globals.set(\"token_consumer\", pm.response.json().token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{consumer_email}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/consumers/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"consumers",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Autenticar consumidor sin correo electrónico",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/consumers/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"consumers",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Autenticar consumidor sin contraseña",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{consumer_email}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/consumers/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"consumers",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Autenticar consumidor con credenciales invalidas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 401\", function() {\r",
									"    pm.response.to.have.status(401)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{consumer_email}}\",\r\n    \"password\": \"1234560\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/consumers/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"consumers",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Autenticar cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.globals.set(\"token_client\", pm.response.json().token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{client_email}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/clients/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"clients",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Autenticar cliente sin correo electrónico",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/clients/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"clients",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Autenticar cliente sin contraseña",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{client_email}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/clients/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"clients",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Autenticar cliente con credenciales invalidas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 401\", function() {\r",
									"    pm.response.to.have.status(401)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{client_email}}\",\r\n    \"password\": \"1234560\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/clients/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"clients",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Empresas",
			"item": [
				{
					"name": "Crear empresa",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.globals.set(\"company_id\", pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/companies",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear empresa sin nombre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/companies",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"companies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Empresas - Clientes",
			"item": [
				{
					"name": "Agregar cliente a empresa",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/companies/:company_id/clients/:client_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"companies",
								":company_id",
								"clients",
								":client_id"
							],
							"variable": [
								{
									"key": "company_id",
									"value": "{{company_id}}"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Agregar cliente a empresa que no existe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/companies/:company_id/clients/:client_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"companies",
								":company_id",
								"clients",
								":client_id"
							],
							"variable": [
								{
									"key": "company_id",
									"value": "{{$guid}}"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Agregar cliente que no existe a empresa",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/companies/:company_id/clients/:client_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"companies",
								":company_id",
								"clients",
								":client_id"
							],
							"variable": [
								{
									"key": "company_id",
									"value": "{{company_id}}"
								},
								{
									"key": "client_id",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Empresas - Consumidores",
			"item": [
				{
					"name": "Agregar consumidor a empresa",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/companies/:company_id/consumers/:consumer_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"companies",
								":company_id",
								"consumers",
								":consumer_id"
							],
							"variable": [
								{
									"key": "company_id",
									"value": "{{company_id}}"
								},
								{
									"key": "consumer_id",
									"value": "{{consumer_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Agregar consumidor a empresa ya asociados",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 409\", function() {\r",
									"    pm.response.to.have.status(409)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/companies/:company_id/consumers/:consumer_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"companies",
								":company_id",
								"consumers",
								":consumer_id"
							],
							"variable": [
								{
									"key": "company_id",
									"value": "{{company_id}}"
								},
								{
									"key": "consumer_id",
									"value": "{{consumer_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Agregar consumidor a empresa que no existe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/companies/:company_id/consumers/:consumer_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"companies",
								":company_id",
								"consumers",
								":consumer_id"
							],
							"variable": [
								{
									"key": "company_id",
									"value": "{{$guid}}"
								},
								{
									"key": "consumer_id",
									"value": "{{consumer_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Agregar consumidor que no existe a empresa",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/companies/:company_id/consumers/:consumer_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"companies",
								":company_id",
								"consumers",
								":consumer_id"
							],
							"variable": [
								{
									"key": "company_id",
									"value": "{{company_id}}"
								},
								{
									"key": "consumer_id",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Consumidores",
			"item": [
				{
					"name": "Obtener consumidor por token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const identifications_types = [\"Cédula de ciudadanía\", \"Cédula de extranjería\", \"Tarjeta de identidad\", \"Pasaporte\"];\r",
									"const identification_type = identifications_types[Math.floor(Math.random() * identifications_types.length)];\r",
									"pm.environment.set(\"identification_type\", identification_type);\r",
									"\r",
									"const identification_number = Math.floor(1000000000 + Math.random() * 9000000000);\r",
									"pm.environment.set(\"identification_number\", identification_number);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().address).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().contact_number).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().create_at).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().email).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().identification_number).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().identification_type).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().roles).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_consumer}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/consumers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"consumers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener consumidor por tipo y número de identificación",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const identifications_types = [\"Cédula de ciudadanía\", \"Cédula de extranjería\", \"Tarjeta de identidad\", \"Pasaporte\"];\r",
									"const identification_type = identifications_types[Math.floor(Math.random() * identifications_types.length)];\r",
									"pm.environment.set(\"identification_type\", identification_type);\r",
									"\r",
									"const identification_number = Math.floor(1000000000 + Math.random() * 9000000000);\r",
									"pm.environment.set(\"identification_number\", identification_number);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().address).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().contact_number).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().create_at).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().email).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().identification_number).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().identification_type).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().roles).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_consumer}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/consumers/identification_type/:identification_type/identification_number/:identification_number",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"consumers",
								"identification_type",
								":identification_type",
								"identification_number",
								":identification_number"
							],
							"variable": [
								{
									"key": "identification_type",
									"value": "{{consumer_identification_type}}"
								},
								{
									"key": "identification_number",
									"value": "{{consumer_identification_number}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener consumidor que no existe por tipo y número de identificación",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const identifications_types = [\"Cédula de ciudadanía\", \"Cédula de extranjería\", \"Tarjeta de identidad\", \"Pasaporte\"];\r",
									"const identification_type = identifications_types[Math.floor(Math.random() * identifications_types.length)];\r",
									"pm.environment.set(\"identification_type\", identification_type);\r",
									"\r",
									"const identification_number = Math.floor(1000000000 + Math.random() * 9000000000);\r",
									"pm.environment.set(\"identification_number\", identification_number);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_consumer}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/consumers/identification_type/:identification_type/identification_number/:identification_number",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"consumers",
								"identification_type",
								":identification_type",
								"identification_number",
								":identification_number"
							],
							"variable": [
								{
									"key": "identification_type",
									"value": "{{consumer_identification_type}}"
								},
								{
									"key": "identification_number",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Empresas - Consumidores - PQRs",
			"item": [
				{
					"name": "Crear un PQRs a un consumidor de una empresa",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomWords = [];\r",
									"for (let i = 0; i < 100; i++) {\r",
									"    randomWords.push(pm.variables.replaceIn(\"{{$randomWord}}\"));\r",
									"}\r",
									"let randomText = randomWords.join(\" \");\r",
									"pm.environment.set(\"longRandomDescription\", randomText);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().status).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().subject).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().description).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.globals.set(\"pcc_id\", pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_consumer}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subject\": \"{{$randomLoremSentence}}\",\r\n    \"description\": \"{{longRandomDescription}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/companies/:company_id/consumers/:consumer_id/pccs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"companies",
								":company_id",
								"consumers",
								":consumer_id",
								"pccs"
							],
							"variable": [
								{
									"key": "company_id",
									"value": "{{company_id}}"
								},
								{
									"key": "consumer_id",
									"value": "{{consumer_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear un PQRs a un consumidor de una empresa con asunto > 250 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomWords = [];\r",
									"let randomText = \"\";\r",
									"for (let i = 0; i < 100; i++) {\r",
									"    randomWords.push(pm.variables.replaceIn(\"{{$randomWord}}\"));\r",
									"}\r",
									"randomText = randomWords.join(\" \");\r",
									"pm.environment.set(\"longRandomDescription\", randomText);\r",
									"\r",
									"for (let i = 0; i < 200; i++) {\r",
									"    randomWords.push(pm.variables.replaceIn(\"{{$randomWord}}\"));\r",
									"}\r",
									"randomText = randomWords.join(\" \");\r",
									"pm.environment.set(\"longRandomSubject\", randomText);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_consumer}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subject\": \"{{longRandomSubject}}\",\r\n    \"description\": \"{{longRandomDescription}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/companies/:company_id/consumers/:consumer_id/pccs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"companies",
								":company_id",
								"consumers",
								":consumer_id",
								"pccs"
							],
							"variable": [
								{
									"key": "company_id",
									"value": "{{company_id}}"
								},
								{
									"key": "consumer_id",
									"value": "{{consumer_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear un PQRs a un consumidor de una empresa con descripción > 1000 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomWords = [];\r",
									"let randomText = \"\";\r",
									"for (let i = 0; i < 1000; i++) {\r",
									"    randomWords.push(pm.variables.replaceIn(\"{{$randomWord}}\"));\r",
									"}\r",
									"randomText = randomWords.join(\" \");\r",
									"pm.environment.set(\"longRandomDescription\", randomText);\r",
									"\r",
									"for (let i = 0; i < 3; i++) {\r",
									"    randomWords.push(pm.variables.replaceIn(\"{{$randomWord}}\"));\r",
									"}\r",
									"randomText = randomWords.join(\" \");\r",
									"pm.environment.set(\"longRandomSubject\", randomText);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_consumer}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subject\": \"{{$randomLoremSentence}}\",\r\n    \"description\": \"{{longRandomDescription}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/companies/:company_id/consumers/:consumer_id/pccs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"companies",
								":company_id",
								"consumers",
								":consumer_id",
								"pccs"
							],
							"variable": [
								{
									"key": "company_id",
									"value": "{{company_id}}"
								},
								{
									"key": "consumer_id",
									"value": "{{consumer_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear un PQRs a un consumidor de una empresa con descripción < 100 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomWords = [];\r",
									"let randomText = \"\";\r",
									"for (let i = 0; i < 3; i++) {\r",
									"    randomWords.push(pm.variables.replaceIn(\"{{$randomWord}}\"));\r",
									"}\r",
									"randomText = randomWords.join(\" \");\r",
									"pm.environment.set(\"longRandomDescription\", randomText);\r",
									"\r",
									"for (let i = 0; i < 3; i++) {\r",
									"    randomWords.push(pm.variables.replaceIn(\"{{$randomWord}}\"));\r",
									"}\r",
									"randomText = randomWords.join(\" \");\r",
									"pm.environment.set(\"longRandomSubject\", randomText);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_consumer}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subject\": \"{{$randomLoremSentence}}\",\r\n    \"description\": \"{{longRandomDescription}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/companies/:company_id/consumers/:consumer_id/pccs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"companies",
								":company_id",
								"consumers",
								":consumer_id",
								"pccs"
							],
							"variable": [
								{
									"key": "company_id",
									"value": "{{company_id}}"
								},
								{
									"key": "consumer_id",
									"value": "{{consumer_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear un PQRs a un consumidor de una empresa sin asunto",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomWords = [];\r",
									"for (let i = 0; i < 100; i++) {\r",
									"    randomWords.push(pm.variables.replaceIn(\"{{$randomWord}}\"));\r",
									"}\r",
									"let randomText = randomWords.join(\" \");\r",
									"pm.environment.set(\"longRandomDescription\", randomText);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_consumer}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{longRandomDescription}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/companies/:company_id/consumers/:consumer_id/pccs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"companies",
								":company_id",
								"consumers",
								":consumer_id",
								"pccs"
							],
							"variable": [
								{
									"key": "company_id",
									"value": "{{company_id}}"
								},
								{
									"key": "consumer_id",
									"value": "{{consumer_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear un PQRs a un consumidor de una empresa sin descripción",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomWords = [];\r",
									"for (let i = 0; i < 100; i++) {\r",
									"    randomWords.push(pm.variables.replaceIn(\"{{$randomWord}}\"));\r",
									"}\r",
									"let randomText = randomWords.join(\" \");\r",
									"pm.environment.set(\"longRandomDescription\", randomText);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_consumer}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{longRandomDescription}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/companies/:company_id/consumers/:consumer_id/pccs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"companies",
								":company_id",
								"consumers",
								":consumer_id",
								"pccs"
							],
							"variable": [
								{
									"key": "company_id",
									"value": "{{company_id}}"
								},
								{
									"key": "consumer_id",
									"value": "{{consumer_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear un PQRs a un consumidor que no existe",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomWords = [];\r",
									"for (let i = 0; i < 100; i++) {\r",
									"    randomWords.push(pm.variables.replaceIn(\"{{$randomWord}}\"));\r",
									"}\r",
									"let randomText = randomWords.join(\" \");\r",
									"pm.environment.set(\"longRandomDescription\", randomText);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_consumer}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subject\": \"{{$randomLoremSentence}}\",\r\n    \"description\": \"{{longRandomDescription}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/companies/:company_id/consumers/:consumer_id/pccs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"companies",
								":company_id",
								"consumers",
								":consumer_id",
								"pccs"
							],
							"variable": [
								{
									"key": "company_id",
									"value": "{{company_id}}"
								},
								{
									"key": "consumer_id",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear un PQRs a un consumidor de una empresa que no existe",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomWords = [];\r",
									"for (let i = 0; i < 100; i++) {\r",
									"    randomWords.push(pm.variables.replaceIn(\"{{$randomWord}}\"));\r",
									"}\r",
									"let randomText = randomWords.join(\" \");\r",
									"pm.environment.set(\"longRandomDescription\", randomText);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_consumer}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subject\": \"{{$randomLoremSentence}}\",\r\n    \"description\": \"{{longRandomDescription}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/companies/:company_id/consumers/:consumer_id/pccs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"companies",
								":company_id",
								"consumers",
								":consumer_id",
								"pccs"
							],
							"variable": [
								{
									"key": "company_id",
									"value": "{{$guid}}"
								},
								{
									"key": "consumer_id",
									"value": "{{consumer_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Asesores - PQRs",
			"item": [
				{
					"name": "Autenticar asesor con PQRs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.globals.set(\"token_agent\", pm.response.json().token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"agente@gmail.com\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/agents/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"agents",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener PQRs de un asesor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_agent}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/agents/pccs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"agents",
								"pccs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener PQRs de un asesor con token de consumidor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 403\", function() {\r",
									"    pm.response.to.have.status(403)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_consumer}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/agents/pccs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"agents",
								"pccs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Autenticar asesor sin PQRs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.globals.set(\"token_agent\", pm.response.json().token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{agent_email}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/agents/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"agents",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener PQRs de un asesor sin PQRs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_agent}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/agents/pccs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"agents",
								"pccs"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PQRs",
			"item": [
				{
					"name": "Obtener PQR por id como consumidor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().status).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().subject).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().notifications).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_consumer}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pccs/:pcc_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pccs",
								":pcc_id"
							],
							"variable": [
								{
									"key": "pcc_id",
									"value": "{{pcc_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener PQR por id que no existe como consumidor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_consumer}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Language",
								"value": "es",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/pccs/:pcc_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pccs",
								":pcc_id"
							],
							"variable": [
								{
									"key": "pcc_id",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener PQR por id como cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().status).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().subject).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().notifications).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_client}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pccs/:pcc_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pccs",
								":pcc_id"
							],
							"variable": [
								{
									"key": "pcc_id",
									"value": "{{pcc_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener PQR por id que no existe como cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_client}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pccs/:pcc_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pccs",
								":pcc_id"
							],
							"variable": [
								{
									"key": "pcc_id",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener PQR por id como asesor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().status).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().subject).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().notifications).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_agent}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pccs/:pcc_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pccs",
								":pcc_id"
							],
							"variable": [
								{
									"key": "pcc_id",
									"value": "{{pcc_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener PQR por id que no existe como asesor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_agent}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pccs/:pcc_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pccs",
								":pcc_id"
							],
							"variable": [
								{
									"key": "pcc_id",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear consumidor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const identifications_types = [\"Cédula de ciudadanía\", \"Cédula de extranjería\", \"Tarjeta de identidad\", \"Pasaporte\"];\r",
									"const identification_type = identifications_types[Math.floor(Math.random() * identifications_types.length)];\r",
									"pm.environment.set(\"identification_type\", identification_type);\r",
									"\r",
									"const identification_number = Math.floor(1000000000 + Math.random() * 9000000000);\r",
									"pm.environment.set(\"identification_number\", identification_number);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().address).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().contact_number).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().create_at).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().email).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().identification_number).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().identification_type).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().roles).to.be.a('array').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.globals.set(\"consumer_email\", pm.response.json().email);\r",
									"pm.globals.set(\"consumer_id\", pm.response.json().id);\r",
									"pm.globals.set(\"consumer_identification_number\", pm.response.json().identification_number);\r",
									"pm.globals.set(\"consumer_identification_type\", pm.response.json().identification_type);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"identification_type\": \"{{identification_type}}\",\r\n    \"identification_number\": \"{{identification_number}}\",\r\n    \"contact_number\": \"{{$randomPhoneNumber}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"address\": \"{{$randomStreetAddress}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/consumers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"consumers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Autenticar consumidor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.globals.set(\"token_consumer\", pm.response.json().token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{consumer_email}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/consumers/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"consumers",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener PQR por id como consumidor al que no pertece",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 409\", function() {\r",
									"    pm.response.to.have.status(409)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_consumer}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pccs/:pcc_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pccs",
								":pcc_id"
							],
							"variable": [
								{
									"key": "pcc_id",
									"value": "{{pcc_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar PQR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().status).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().subject).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().notifications).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const status_list = [\"Pendiente por documentación\", \"Cerrada con solución\", \"Cerrada sin solución\", \"En revisión\"];\r",
									"const status = status_list[Math.floor(Math.random() * status_list.length)];\r",
									"pm.environment.set(\"status\", status);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_agent}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"{{status}}\",\r\n    \"reason\": \"{{$randomLoremSentence}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/pccs/:pcc_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pccs",
								":pcc_id"
							],
							"variable": [
								{
									"key": "pcc_id",
									"value": "{{pcc_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar PQR sin estado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const status_list = [\"Pendiente por documentación\", \"Cerrada con solución\", \"Cerrada sin solución\", \"En revisión\"];\r",
									"const status = status_list[Math.floor(Math.random() * status_list.length)];\r",
									"pm.environment.set(\"status\", status);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_agent}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reason\": \"{{$randomLoremSentence}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/pccs/:pcc_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pccs",
								":pcc_id"
							],
							"variable": [
								{
									"key": "pcc_id",
									"value": "{{pcc_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar PQR sin razón",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const status_list = [\"Pendiente por documentación\", \"Cerrada con solución\", \"Cerrada sin solución\", \"En revisión\"];\r",
									"const status = status_list[Math.floor(Math.random() * status_list.length)];\r",
									"pm.environment.set(\"status\", status);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_agent}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/pccs/:pcc_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pccs",
								":pcc_id"
							],
							"variable": [
								{
									"key": "pcc_id",
									"value": "{{pcc_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar PQR con razón < 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const status_list = [\"Pendiente por documentación\", \"Cerrada con solución\", \"Cerrada sin solución\", \"En revisión\"];\r",
									"const status = status_list[Math.floor(Math.random() * status_list.length)];\r",
									"pm.environment.set(\"status\", status);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_agent}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"{{status}}\",\r\n    \"reason\": \"short\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/pccs/:pcc_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pccs",
								":pcc_id"
							],
							"variable": [
								{
									"key": "pcc_id",
									"value": "{{pcc_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar PQR con razón > 1000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 402\", function() {\r",
									"    pm.response.to.have.status(402)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().fields).to.be.a('array').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const status_list = [\"Pendiente por documentación\", \"Cerrada con solución\", \"Cerrada sin solución\", \"En revisión\"];\r",
									"const status = status_list[Math.floor(Math.random() * status_list.length)];\r",
									"pm.environment.set(\"status\", status);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_agent}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"{{status}}\",\r\n    \"reason\": \"Licensed transform back-end Home mobile Account e-business Handcrafted redefine Clothing Islands Unbranded maroon collaboration Guyana Account Generic Mountains Lira EXE SAS Fresh Luxembourg Ball strategic Concrete Directives Security Chips relationships program front-end Courts Right-sized Lead payment Iraqi e-markets Communications functionalities interactive matrix Cotton high-level Pants 5th olive Loan infomediaries Cambridgeshire Lead Pizza Soft motivating indexing synthesize West object-oriented Gloves Utah Concrete client-server Home port USB quantifying International SDD Bedfordshire scalable Card cross-platform Bike encompassing reintermediate Music Account Fresh Concrete Fish facilitate Cotton encoding compress User-centric Fresh coherent system West Officer Personal systems Concrete incentivize Extended lavender Liaison Generic invoice Pizza Licensed transform back-end Home mobile Account e-business Handcrafted redefine Clothing Islands Unbranded maroon collaboration Guyana Account Generic Mountains Lira EXE SAS Fresh Luxembourg Ball strategic Concrete Directives Security Chips relationships program front-end Courts Right-sized Lead payment Iraqi e-markets Communications functionalities interactive matrix Cotton high-level Pants 5th olive Loan infomediaries Cambridgeshire Lead Pizza Soft motivating indexing synthesize West object-oriented Gloves Utah Concrete client-server Home port USB quantifying International SDD Bedfordshire scalable Card cross-platform Bike encompassing reintermediate Music Account Fresh Concrete Fish facilitate Cotton encoding compress User-centric Fresh coherent system West Officer Personal systems Concrete incentivize Extended lavender Liaison Generic invoice Pizza\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/pccs/:pcc_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pccs",
								":pcc_id"
							],
							"variable": [
								{
									"key": "pcc_id",
									"value": "{{pcc_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar PQR que no existe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const status_list = [\"Pendiente por documentación\", \"Cerrada con solución\", \"Cerrada sin solución\", \"En revisión\"];\r",
									"const status = status_list[Math.floor(Math.random() * status_list.length)];\r",
									"pm.environment.set(\"status\", status);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_agent}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"{{status}}\",\r\n    \"reason\": \"{{$randomLoremSentence}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/pccs/:pcc_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pccs",
								":pcc_id"
							],
							"variable": [
								{
									"key": "pcc_id",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar PQR con token de consumidor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 403\", function() {\r",
									"    pm.response.to.have.status(403)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().error_code).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().error_message).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const status_list = [\"Pendiente por documentación\", \"Cerrada con solución\", \"Cerrada sin solución\", \"En revisión\"];\r",
									"const status = status_list[Math.floor(Math.random() * status_list.length)];\r",
									"pm.environment.set(\"status\", status);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_consumer}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"{{status}}\",\r\n    \"reason\": \"{{$randomLoremSentence}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/pccs/:pcc_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pccs",
								":pcc_id"
							],
							"variable": [
								{
									"key": "pcc_id",
									"value": "{{pcc_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cliente -PQRs",
			"item": [
				{
					"name": "Obtener PQRs de un cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_client}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/clients/pccs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clients",
								"pccs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener PQRs de un cliente con token de consumidor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 403\", function() {\r",
									"    pm.response.to.have.status(403)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_consumer}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/clients/pccs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clients",
								"pccs"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "X-API-Key",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://farming-simulator.pstmn.io"
		}
	]
}